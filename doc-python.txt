PYTHON - обєктно-орієнтовнана мова програмування
Саме важливе в PYTHON - це ОБЄКТИ. Всі сутності в python це - обєкти
Обєкт - це екземпляр класса
Клас - це шаблон або протопит для створення обєкта
На основі одного класу можна створити багато обєктів
В кожного обєкта є АТРИБУТИ. 
АТРИБУТИ ОБЄКТА називаються МЕТОДИ, якщо його значення - ФУНКЦІЯ. Тобто щось схоже до JS.


---- ОСНОВНІ ТИПИ ----

str 'Ivan' - строка
int 10 - цифри (тільки цілі цифри, 5, 0, 100, -10)
bool True/False - логічні
list [1, 2, 3] - список (те саме що МАСИВ в JS)
dict {'min': 5, 'max': 8} - словник (те саме що звичайний ОБЄКТ в JS)


---- ВБУДОВАНІ ФУНКЦІЇ ----
  (built-in function dir)

вбудована | виклик функції
print() - виводить в консоль данні, схожу до alert javascript
print("Hello Python") - значення типа str (string)
input() - схоже до PROMPT в JS
dir() - вбудована функція


---- PEP8 ----
Python Enhancement Proposal
Документація по рекомендації як писати код на PYTHON

1. Для відступів використовувати 4 пробіла
2. Довжина строчки не повинна бути більше 79 символів
3. Функції і Класи повинні бути відокремленні від інших строк коду двума пустими строками
4. Імпорти модулів повинні бути на окремих строках
5. Коментарії в кінці строки коду, повинні відокремлюватися як мінімум 2 пробілами


---- ФУНКЦІЇ ----
def - ключове слово для створення функції (як в JS function)
hello - назва функції
hello(name) - name тут у вигляді параметра, який приймає функція hello

def hello(name):
    res = ("Hello there!", name)
    return res - return тут для того щоб повернути щось від функції

hello('Ivan') - тут ми викликаємо нашу функцію і передаємо їй аргумент 'Ivan'


---- ВИРАЗ ----
  EXPRESSION

Результат кожного виразу являється значення
5+3 = 8 - вісім буде значенням
a > b - True or False теж що поверне ту і буде значенням
my_func(10, 5) - повернення результату функції завжди буде значенням


---- ІНСТРУКЦІЯ ----
     STATEMENTS
Інструкція виконує дію

import datetime - в python імпортування файлів, теж називається інструкцією


---- ЗМІННІ ----

snake_case - змінні, функції, методи, модулів - все в нижньому регістрі
PascalCase - використовується для классів, перша буква завжди велика
my-package - пакети(модулі), які ми створюємо
DB_PASSWORD - константи, те що не можна змінювати, завжди у великому регістрі


---- ДИНАМІЧНА ТИПІЗАЦІЯ В PYTHON ----
Правила роботи із змінними:
1. Завжди вибирати осмислені назви
2. В назвах змінних використовувати імя існуюче, наприклад name, comments, new_photos
Імя змінної повиноо відповідати на питання "Що тут знаходиться?"
3. Назви функцій і методі починати з дієслова, напиклад get_data(відправити данні), create_request(створити запит), merge_names(обєднати імена)
Імя ффункцій, повинні відповідати на питання: "Що виконує чи повертає?"


---- ТИПИ І СТРУКТУРИ ДАННИХ ----

ТИПИ НЕЗМІНЮЮЧИХ ОБЄКТІВ, ми можемо перестворити цей обєкт, але не змінити
string(строка) str
boolean (логічний) bool
integer (ціле число) int
float (число з десятичной точкою) 
tuple (кортеж) tuple
None (нічого) NoneType

ТИПИ ЗМІНЮЮЧИХ ОБЄКТІВ
list (список) list
dictionary (словник) dict
set (набір) set
user-defined classes (користувацькі класси, тобто власно створюючі мною)


----  ----






----  ----







----  ----






----  ----
